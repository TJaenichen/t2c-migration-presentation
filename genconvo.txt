Hi! I need you to migrate the stored procedure fd_fma_web_TransactionTmp_CRE_Read to C# using Entity Framework Core.

Accuracy is most important in mapping from TSQL to C#.

The stored procs are from MS SQL. The output must be exactly one C# source file (supporting functions and classes must be 
contained within this file).

The code must be in the 'FMA2.UseCases.Implementations' namespace and should be named fd_fma_web_TransactionTmp_CRE_Read.cs.

For database access the relevant models are provided below. 
The generated C# must produce the same output as the original SPs with the same input.
Do not worry about performance. This includes code that is commented out. 
Leave these as comments, where posssible.

Any clean up to make the code adhere to best practices will follow in a later step.

The Db contexts are called CrmDbContext (most tables) and AsiDbContext (for tbCustomer 
and other tables starting with tb).
The Contexts are in the EFModels.CrmData and EFModels.AsiData namespaces for crm and asiDb, the Models 
in EFModels.CrmModel and EFModels.AsiModel. Ensure all 4 are imported in the generated code.

The Models are for EF core. So for date functions DateTime.Now.Date, for example, would work.

The system uses dependency injection. Assume that any dependencies are already registered in the DI container and inject them
in the constructor. 

Assume any dependent stored procedures are already migrated to C# and you can inject them in the constructor via DI. 

So if the original contains:

EXEC OtherStoredProc

migrate that to using the injected service (I<otherSPName>)...

The crmDbContext and asiDbContext should be supplied in the constructor and then assigned a private field for usage in the class.

This is a very complex task. Take all the time you need to ensure the SQL is translated properly
and the same inputs result in the same outputs. Think it through step by step.
Slow is smooth, smooth is fast. 

Because of timing complexities and DI, implement the function as a pure function that does not rely on private properties to hold data.
If needed, you can create private classes and structs to organize things better.

Make a plan first for how to tackle this and then execute it fully.

Having the most accurate representation of the T-SQL in C# is imperative.

Here comes the SP to convert and the relevant context and dependencies:


--GRANT EXEC ON fd_fma_web_TransactionTmp_CRE_Read TO CRMWEBUSER
--EXEC fd_fma_web_TransactionTmp_CRE_Read 623401 
-- ==================================================================================
-- Author					:		Yong Yan
-- Create date				:		May 10,2011
-- Description				:		Read Transaction Info from cre tmp table
-- Procedure_name			:       fd_fma_web_TransactionTmp_CRE_Read
-- 2023-07-05 Dsaravia		:		Added alias to tables
-- ==================================================================================
-- Strip Zip 09/15/2012

CREATE PROCEDURE [dbo].[fd_fma_web_TransactionTmp_CRE_Read]
@tmpTransId INT
AS
BEGIN
	SET NOCOUNT ON;

	DECLARE @CustomerID	VARCHAR(10)
	DECLARE @IpAddress	VARCHAR(15)

	DECLARE @FirstName VARCHAR(100)
	DECLARE @LastName VARCHAR(100)
	DECLARE @Address VARCHAR(255)
	DECLARE @City VARCHAR(100)
	DECLARE @State VARCHAR(10)
	DECLARE @Country VARCHAR(2)
	DECLARE @CountryCode3 VARCHAR(3)
	DECLARE @Zip VARCHAR(15)
    DECLARE @phone VARCHAR(20)

	SELECT @CustomerID = CustomerID FROM fmaTransactionsTEMP_CRE WHERE TransactionID = @tmpTransId
	EXEC fma_web_Customer_IpAddress_Read @CustomerID, @IpAddress OUTPUT

    SELECT TOP 1 @phone = PhoneNumber FROM [main].[fn_CustomerPhones] (@CustomerID) ORDER BY Preferred DESC, Mobile DESC

	SELECT TOP 1
		@FirstName = CASE WHEN CHARINDEX(' ', NameOnCard) > 0 
						THEN SUBSTRING(NameOnCard, 1, LEN(NameOnCard) - CHARINDEX(' ', REVERSE(NameOnCard)))
						ELSE NULL END,
		@LastName = CASE WHEN CHARINDEX(' ', NameOnCard) > 0
						THEN REVERSE(SUBSTRING(REVERSE(NameOnCard), 1, CHARINDEX(' ', REVERSE(NameOnCard)) - 1))
						ELSE NULL END,
		@Address = CustomerAddress.[Address],
		@City = CustomerAddress.City,
		@State = crmStates.StateShortName,
		@Country = crmCountries.CountryNameShort,
		@CountryCode3 = crmCountries.CountryNameShort2,
		@Zip = CASE WHEN crmCountries.CountryNameShort = 'US' THEN LEFT(CustomerAddress.ZipCode, 5) ELSE CustomerAddress.ZipCode END
	FROM
		fmaTransactionsTEMP_CRE
	INNER JOIN
		fmaCreditCards
	ON
		fmaCreditCards.CustomerID = fmaTransactionsTEMP_CRE.CustomerID
	AND
		fmaCreditCards.CreditCardID = fmaTransactionsTEMP_CRE.CreditCardId
	--AND
	--	fmaCreditCards.CCNumber = fmaTransactionsTEMP_CRE.CardNo
	--AND
	--	fmaCreditCards.IsAssociated = 1
	LEFT JOIN
		main.Customer_Address AS CustomerAddress
	ON
		CustomerAddress.CustomerId = fmaCreditCards.CustomerId
	AND
		CustomerAddress.AddressId = ISNULL(fmaCreditCards.AddressId, -1)
	LEFT JOIN
		crmCountries
	ON 
		crmCountries.CountryId = CustomerAddress.CountryId
	LEFT JOIN 
		crmStates
	ON 
		crmStates.StateId = CustomerAddress.StateId
	WHERE
		TransactionID = @tmpTransId

	SELECT		T.TransactionID,
				CustomerID		=	T.CustomerID,
				CardType		=	ISNULL(RTRIM(LTRIM(T.CardType)), ''),
				CardNo			=	ISNULL(RTRIM(LTRIM(T.CardNo)), ''),
				CVV				=	ISNULL(RTRIM(LTRIM(T.Cvv)), ''),
				ExpirationDate	=	REPLACE(ISNULL(RTRIM(LTRIM(T.ExpirationDate)), ''),'/','20'),
				Amount			=	CAST(FORMAT(ISNULL(T.Amount,0),'N2') AS MONEY),
				SiteID			=	T.SiteID,
				T.BonusID,
				FirstName		=	ISNULL(@FirstName, REPLACE(ISNULL(C.NameFirst, ''), '&', '')),
				LastName		=	ISNULL(@LastName, REPLACE(ISNULL(C.NameLast, ''), '&', '')),
				[Address]		=	CASE WHEN ISNULL(@Address, '') <> '' THEN @Address ELSE REPLACE(ISNULL(C.Address, ''), '&', '') END,
				City			=	CASE WHEN ISNULL(@Address, '') <> '' THEN @City ELSE ISNULL(C.City, '') END,
				[State]			=	CASE WHEN ISNULL(@Address, '') <> '' THEN @State ELSE ISNULL(C.State, '') END,
				Country			=	CASE WHEN ISNULL(@Address, '') <> '' THEN @Country ELSE ISNULL(C.Country, '') END,
				CountryCode3	=	CASE WHEN ISNULL(@Address, '') <> '' THEN @CountryCode3 ELSE ISNULL(CT.CountryNameShort2,'USA') END,
				Zip				=	CASE WHEN ISNULL(@Address, '') <> '' THEN @Zip ELSE LEFT(ISNULL(C.Zip, ''),5) END,
                Email           =   CASE WHEN C.EMail IS NULL OR C.EMail = '' THEN RTRIM(C.CustomerID) + '@DepositConfirm.com' 
                                    ELSE CASE 
                                            WHEN C.EMail LIKE '%-AVACES%' THEN SUBSTRING(C.EMail, 0,LEN(C.EMail)-6) 
                                            WHEN C.EMail LIKE '%-ASLOTS%' THEN SUBSTRING(C.EMail, 0,LEN(C.EMail)-6) 
                                            ELSE C.EMail
                                        END 	
                                    END,	
				PhoneNumber		=	ISNULL(@phone, ''),
				PhoneCode		=	ISNULL(CT.PhoneCode,'1'),
				Dob				=	ISNULL(P.BirthDate, '1/1/1980'),
				IPAddress		=	ISNULL(@IpAddress,''),
				SessionId		=	CAST(ISNULL(T.LogSessionID, '') AS VARCHAR),
				NumericCode		=	ISNULL(CT.NumericCode,''),
                CAST([fma].[fn_IsValhallaAccount] (@CustomerID) AS BIT)     AS 'IsValhallaAccount'
	FROM		fmaTransactionsTEMP_CRE T
	LEFT JOIN	ASIDb.dbo.tbCustomer C WITH(NOLOCK)
				ON T.CustomerID = C.CustomerID
	LEFT JOIN	crmProfiles P WITH(NOLOCK)
				ON P.CustomerID = C.CustomerID
	LEFT JOIN	crmCountries AS CT
				ON C.Country = CT.CountryNameShort
	WHERE		TransactionID = @tmpTransId

END

Following are the dependencies of this stored procedure:


/*
 ==========================================================================================
   Test:
		SELECT * FROM [main].[fn_CustomerPhones] ('131029')
   Revisions:	
		2015-11-23 Created. Returns active customer phones - Soheil
		2019-07-19 Enhanced to add more details
		2019-09-27 Removed properties not used, added call info
==========================================================================================
*/
CREATE FUNCTION [main].[fn_CustomerPhones] ( @CustomerID VARCHAR(10) )
RETURNS TABLE
    AS
RETURN
    ( SELECT    OP.ObjectPropertyId ,
                [Value] AS PhoneNumber ,
				OP.FromDate,
				OP.FromObjectId,
				-- CASE WHEN OPC2.ObjectPropertyId is NOT NULL THEN 1 ELSE 0 END AS IsLandline ,
				-- CASE WHEN OPC3.ObjectPropertyId is NOT NULL THEN 1 ELSE 0 END AS Prepaid ,
				CAST(CASE WHEN OPC4.ObjectPropertyId is NOT NULL THEN 1 ELSE 0 END AS BIT) AS Mobile ,
				-- CASE WHEN OPC5.ObjectPropertyId is NOT NULL THEN 1 ELSE 0 END AS Voip ,
				CAST(CASE WHEN OPC6.ObjectPropertyId is NOT NULL THEN 1 ELSE 0 END AS BIT) AS HomePhone,
				-- CASE WHEN OPC7.ObjectPropertyId is NOT NULL THEN 1 ELSE 0 END AS BusinessPhone ,
				CAST(CASE WHEN OPC8.ObjectPropertyId is NOT NULL THEN 1 ELSE 0 END AS BIT) AS Preferred ,
				-- CASE WHEN OPC9.ObjectPropertyId is NOT NULL THEN 1 ELSE 0 END AS Verified ,
				-- CASE WHEN OPC10.ObjectPropertyId is NOT NULL THEN 1 ELSE 0 END AS Disconnected
				opci.InboundCallCount,
				opci.OutboundCallCount
      FROM      dbo.crmProfiles P 
                JOIN main.[ObjectProperty] OP ON OP.ObjectId = P.ObjectId
                JOIN main.ObjectPropertyCategory OPC1 ON OPC1.ObjectPropertyId = OP.ObjectPropertyId
                --LEFT JOIN main.ObjectPropertyCategory OPC2 ON OPC2.ObjectPropertyId = OP.ObjectPropertyId
                --                                              AND OPC2.CategoryId = 17001 AND OPC2.IsActive = 1
                --LEFT JOIN main.ObjectPropertyCategory OPC3 ON OPC3.ObjectPropertyId = OP.ObjectPropertyId
                --                                              AND OPC3.CategoryId = 17002 AND OPC3.IsActive = 1 
                LEFT JOIN main.ObjectPropertyCategory OPC4 ON OPC4.ObjectPropertyId = OP.ObjectPropertyId
                                                              AND OPC4.CategoryId = 17003 AND OPC4.IsActive = 1
                --LEFT JOIN main.ObjectPropertyCategory OPC5 ON OPC5.ObjectPropertyId = OP.ObjectPropertyId
                --                                              AND OPC5.CategoryId = 17004 AND OPC5.IsActive = 1
                LEFT JOIN main.ObjectPropertyCategory OPC6 ON OPC6.ObjectPropertyId = OP.ObjectPropertyId
                                                              AND OPC6.CategoryId = 17005 AND OPC6.IsActive = 1
                --LEFT JOIN main.ObjectPropertyCategory OPC7 ON OPC7.ObjectPropertyId = OP.ObjectPropertyId
                --                                              AND OPC7.CategoryId = 17006 AND OPC7.IsActive = 1
                LEFT JOIN main.ObjectPropertyCategory OPC8 ON OPC8.ObjectPropertyId = OP.ObjectPropertyId
                                                              AND OPC8.CategoryId = 17007 AND OPC8.IsActive = 1
                --LEFT JOIN main.ObjectPropertyCategory OPC9 ON OPC9.ObjectPropertyId = OP.ObjectPropertyId
                --                                              AND OPC9.CategoryId = 17008 AND OPC9.IsActive = 1
                --LEFT JOIN main.ObjectPropertyCategory OPC10 ON OPC10.ObjectPropertyId = OP.ObjectPropertyId
                --                                              AND OPC10.CategoryId = 17009 AND OPC10.IsActive = 1
                LEFT JOIN main.ObjectProperty_CallInfo AS opci ON opci.ObjectPropertyId = OP.ObjectPropertyId
      WHERE     OPC1.CategoryId = 4001 -- Phone Number
                AND OPC1.IsActive = 1
                AND P.CustomerID = @CustomerID
    )



-- ==========================================================
-- Author:		Yong
-- Create date: 2023-07-14
-- Description: return whether customer is from Valhalla
-- ==========================================================
CREATE     FUNCTION [fma].[fn_IsValhallaAccount] 
(
	@customerId	varchar(10)
)
RETURNS BIT
AS
BEGIN
	IF (SELECT A.MasterAgentId FROM [ASIDb].[dbo].tbCustomer C LEFT JOIN [ASIDb].[dbo].tbAgent A ON C.AgentId = A.AgentID
						WHERE CustomerId = @customerId) IN ('ACASINO','ACASINOTES')
		RETURN 1

	RETURN 0

END

Following are the tables and views used:
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
CREATE TABLE [dbo].[crmCountries](
	[CountryID] [int] IDENTITY(1,1) NOT NULL,
	[CountryName] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[CountryNameShort] [char](2) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[Is4Web] [bit] NOT NULL,
	[Is4IMSCall] [bit] NOT NULL,
	[IsBlockCC] [bit] NOT NULL,
	[AllowJoin] [bit] NOT NULL,
	[CountryNameShort2] [char](3) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CountryOrder] [smallint] NULL,
	[PhoneCode] [varchar](3) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[TimeZoneDiff] [decimal](3, 0) NULL,
	[IsGeoIpAccepted] [bit] NULL,
	[Area] [varchar](20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[NumericCode] [char](3) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[IsBlockCrypto] [bit] NOT NULL
) ON [PRIMARY]

SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
CREATE TABLE [dbo].[crmProfiles](
	[CustomerID] [varchar](10) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[Mobile] [varchar](25) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[MotherMaidenName] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[ContactPreferenceID] [int] NULL,
	[SportType1ID] [int] NULL,
	[SportType2ID] [int] NULL,
	[SportType3ID] [int] NULL,
	[ReferralPercentageID] [int] NULL,
	[CustomerValueID] [int] NULL,
	[NoSpouseFlag] [bit] NULL,
	[CancelID] [int] NULL,
	[PhoneNumberID] [int] NULL,
	[NameFirst] [varchar](30) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[NameLast] [varchar](30) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[Password] [varchar](25) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[NoBonusFlag] [bit] NULL,
	[BornCity] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[BirthDate] [smalldatetime] NULL,
	[IsOnlyForFootball] [bit] NULL,
	[IsNoBonus] [bit] NULL,
	[IsNoneRecreational] [bit] NULL,
	[IsAveragePlayer] [bit] NULL,
	[IsReceivingEMail] [bit] NULL,
	[HasRecordingFile] [bit] NULL,
	[IsPokerCustomer] [bit] NULL,
	[Gender] [char](1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[OddsDisplayFormat] [char](1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[OtherPhone] [varchar](25) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[NoVoiceMail] [bit] NULL,
	[UserID] [int] NULL,
	[JoinDate] [datetime] NULL,
	[IsCollections] [bit] NULL,
	[CustState] [varchar](2) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CustCountry] [varchar](30) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[IsActive] [bit] NULL,
	[ActiveCustomerID] [varchar](10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[BrontoContactID] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[IsRivalCustomer] [bit] NULL,
	[VIPDate] [datetime] NULL,
	[SBCustomerID] [varchar](10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[BrontoStatus] [varchar](20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[IsRivalSB] [bit] NULL,
	[IsDisConnected] [bit] NULL,
	[HighRisk] [bit] NULL,
	[IsNoDepConfEmail] [bit] NULL,
	[isNewBonusStructure] [bit] NULL,
	[IsAutoMobileUpdateOld] [bit] NULL,
	[IsVerifyAddress] [bit] NULL,
	[IsInvalidEmail] [bit] NULL,
	[IsMainAccount] [bit] NULL,
	[IsRetentionCustomer] [bit] NULL,
	[Language] [varchar](2) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[IsSecurity] [bit] NULL,
	[SiteID] [int] NULL,
	[IsSpousalContactOk] [bit] NULL,
	[FMCBalance] [money] NULL,
	[IsAccountLocked] [bit] NULL,
	[HasCashDeposit] [bit] NULL,
	[IsAutoMobileUpdate] [char](1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[BlockInetDeposit] [bit] NULL,
	[HasBW] [bit] NULL,
	[ClosedDomainNotice] [bit] NOT NULL,
	[IsBlockReferral] [bit] NULL,
	[ProxyID] [int] NULL,
	[IsNoPayout] [bit] NULL,
	[Deceased] [bit] NULL,
	[NoSpecialBonus] [bit] NULL,
	[ObjectID] [int] NULL,
	[IsNoCall] [bit] NULL,
	[NoCallUntil] [datetime] NULL,
	[IsAddressOnly4Mailer] [bit] NULL,
	[NoCashPreauth] [bit] NULL,
	[IsNoCasinoBonus] [bit] NULL,
	[NameMiddle] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[NoPopUpMarketing] [bit] NULL,
	[IsNoSMS] [bit] NULL,
	[NoFreeBets] [bit] NULL,
	[HashedPassword] [varchar](250) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
) ON [PRIMARY]

SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
CREATE TABLE [dbo].[crmStates](
	[StateID] [int] IDENTITY(1,1) NOT NULL,
	[StateName] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[StateShortName] [char](2) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CountryShortName] [char](2) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[TimeZoneDiff] [smallint] NULL,
	[TimeZoneDiffDST] [smallint] NULL,
	[AllowJoin] [bit] NOT NULL
) ON [PRIMARY]

SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
CREATE TABLE [main].[Customer_Address](
	[AddressId] [int] IDENTITY(1,1) NOT NULL,
	[CustomerId] [char](10) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[CountryId] [int] NOT NULL,
	[StateId] [int] NULL,
	[City] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[Address] [varchar](500) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[ZipCode] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[IsMailing] [bit] NOT NULL,
	[FromDate] [datetime] NOT NULL,
	[FromObjectId] [int] NOT NULL,
	[ThruDate] [datetime] NULL,
	[ThruObjectId] [int] NULL,
	[IsPreferred] [bit] NULL,
	[IsActive]  AS (CONVERT([bit],case when [ThruDate] IS NULL AND [ThruObjectId] IS NULL then (1) else (0) end))
) ON [PRIMARY]

SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
CREATE TABLE [dbo].[fmaCreditCards](
	[CreditCardID] [int] IDENTITY(1,1) NOT FOR REPLICATION NOT NULL,
	[CustomerID] [varchar](10) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[CardType] [varchar](2) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[CCNumber] [varchar](20) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[ExpirationDate] [varchar](6) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[CVV] [varchar](5) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[IsUnique] [bit] NULL,
	[CreatedDate] [datetime] NOT NULL,
	[IsDocumented] [bit] NOT NULL,
	[DocumentID] [int] NULL,
	[Notes] [varchar](max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[IsCCVF] [bit] NULL,
	[CCVFDocumentID] [int] NULL,
	[IsAssociated] [bit] NULL,
	[Brand] [varchar](20) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[Pwd3D] [varchar](15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[Comments] [varchar](max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[LastDepositDate] [smalldatetime] NULL,
	[ActiveInWallet] [bit] NOT NULL,
	[HiddenInWallet] [bit] NOT NULL,
	[IsUsed] [bit] NOT NULL,
	[Preferred] [bit] NOT NULL,
	[DocumentStatus] [int] NOT NULL,
	[OrderNo] [int] NOT NULL,
	[BusinessCcDocId] [int] NULL,
	[IsBusinessCC] [bit] NULL,
	[AddressId] [int] NULL,
	[NameOnCard] [varchar](25) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[IsMailingAddress] [bit] NULL,
	[IsDefault] [bit] NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]

SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
CREATE TABLE [dbo].[fmaTransactionsTEMP_CRE](
	[TransactionID] [int] IDENTITY(1,1) NOT NULL,
	[ProcessorTypeCode] [char](3) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[CustomerID] [varchar](10) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[CardType] [varchar](20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CardNo] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[CVV] [varchar](6) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[ExpirationDate] [char](5) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[Amount] [money] NOT NULL,
	[SiteID] [int] NOT NULL,
	[BonusID] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CreatedDate] [datetime] NULL,
	[Channel] [int] NOT NULL,
	[LogSessionID] [bigint] NULL,
	[FMATransactionID] [int] NULL,
	[SLResultID] [int] NULL,
	[ProcessingFee] [money] NULL,
	[CreditCardId] [int] NULL,
	[ResendTransactionID] [int] NULL,
	[BankId] [nvarchar](255) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[UserIp] [varchar](15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
) ON [PRIMARY]

CREATE VIEW dbo.tbCustomer
AS
SELECT        CustomerID, NameLast, NameFirst, NameMI, Address, City, State, Zip, Country, EMail, HomePhone, BusinessPhone, Fax, Password, ParlayName, AgentID, OpenedBy, CreditLimit, ignoreComments, Active, AccessedBy, 
                         LastVerDateTime, LastVerDocumentNumber, LastVerBalance, ignoreCommentsForTW, PercentBook, WagerLimit, StaticLinesFlag, CreditAcctFlag, BaseballAction, UsePuckLineFlag, PayoutPassword, LastCallDateTime, Source, 
                         Promoter, ReferredBy, IntFootballFlag, IntBasketballFlag, IntHockeyFlag, IntBaseballFlag, IntHorsesFlag, IntOtherFlag, EstWager5to50Flag, EstWager51to100Flag, EstWager101to500Flag, EstWager501to1000Flag, 
                         EstWagerOver1000Flag, ZeroBalanceFlag, Currency, CurrentBalance, LastInsDocumentNumber, PendingWagerBalance, PendingWagerCount, VigDiscountExpDate, VigDiscountPercent, InetVigDiscountExpDate, 
                         InetVigDiscountPercent, OpenDateTime, NoMailFlag, NoEmailFlag, NoPhoneFlag, InetTarget, LossCap, ShaveFbHalfPoint, ShaveBbHalfPoint, ApplyDetailWagerLimitsFlag, EnforceAccumWagerLimitsFlag, ParlayMaxBet, 
                         ParlayMaxPayout, HorseMaxBet, HorseMaxPayout, TeaserMaxBet, ContestMaxBet, AgentType, HalfPointCuBasketballFlag, HalfPointCuBasketballDow, HalfPointInetBasketballFlag, HalfPointInetBasketballDow, 
                         HalfPointCuFootballFlag, HalfPointCuFootballDow, HalfPointInetFootballFlag, HalfPointInetFootballDow, HalfPointMaxBet, InstantActionFlag, ignoreCommentsForCustomer, CarryOverAmount, WeeklyLimitFlag, SettleFigure, 
                         ConfirmationDelay, EasternLineFlag, TempCreditAdj, TempCreditAdjExpDate, FreePlayBalance, FreePlayPendingBalance, FreePlayPendingCount, AutoAgentShadeGroupFlag, CUMinimumWager, CasinoActive, 
                         InetMinimumWager, TimeZone, EnableRifFlag, LimitRifToRiskFlag, WiseActionFlag, EnforceAccumWagerLimitsByLineFlag, PriceType, BookId, Comments, CommentsForTW, CommentsForCustomer, LastchangedBy, 
                         ZeroBalPositiveOnlyFlag, TempWagerLimit, TempWagerLimitExpiration, LastWagerDateTime, EnforceParlayMaxBetFlag, EnforceTeaserMaxBetFlag, SessionID, SessionLastActivity, FavoriteSport, FavoriteSportSubType, 
                         FavoriteTeamID, WebLanguage, WebHomePage, WebPitcherOption, WebRememberPassword, ShowLinesUpdIndicator, CanControlCasinosAccess, LiveBettingAccepted, ShowInetCustomerPassword, HalfPointWagerLimitFlag, 
                         HalfPointFootballOn3Flag, HalfPointFootballOff3Flag, HalfPointFootballOn7Flag, HalfPointFootballOff7Flag, HalfPointDenyTotalsFlag, LastUpdateDateTime, CustomerIsABot, AdditionalComments1, AdditionalComments2, 
                         AdditionalComments3, AdditionalComments4, AdditionalComments5, ShowBetSlipInWebSite, MaxProfitPerWeek, MaxWeeksDFAndPerformance, CommentsForCstExpDate, CommentsForTWExpDate, ContestMaxPayout, 
                         NotifyBetsToAgent, CashierActivated, ActionReverseMaxBet, MaxMoneyLinePrice, MaxContestPrice, EncryptedPassword, PasswordKey, LoginID, IsGeoFenceCountryState, TemporalToken, TemporalTokenDateTime, 
                         ParlaysPayWithTrueOdds, IsAffiliate, CustomerBirthDate, PromoCode, CMAccessedBy, AdditionalComments6, AdditionalComments7, AutoRebateCasino, Address2, AdditionalComments8, DailyWagerLimit, WeeklyWagerLimit, 
                         MonthlyWagerLimit, Ssn, Gender, POSTaxPercent, EnforceAccumWagerLimitsMode, IfBetMaxBet, IfBetMaxPayout, RoundRobinMaxBet, RoundRobinMaxPayout, NotifyBetsToAgentAmt, Id_bonus_plan, Score, IsOutsourced, 
                         ChangePasswordRequired, LastChangePasswordRequiredDT, CID
FROM            asidb.dbo.tbCustomer

SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
CREATE TABLE [dbo].[fwsCustomerIp](
	[CustomerId] [varchar](10) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[LastIp] [varchar](20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[LastIpDate] [datetime] NULL,
	[Country] [varchar](2) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[State] [varchar](2) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[City] [varchar](80) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[IsGenerated] [bit] NULL
) ON [PRIMARY]

SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
CREATE TABLE [log].[Sessions](
	[SessionId] [bigint] IDENTITY(1,1) NOT NULL,
	[PoolId] [int] NOT NULL,
	[UserId] [char](32) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[VisitCount] [smallint] NOT NULL,
	[UserIp] [char](15) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[UserAgentID] [int] NOT NULL,
	[SessionStartTime] [datetime] NOT NULL,
	[UrlId] [int] NULL,
	[CountryCode] [char](2) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[StateCode] [char](2) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CookieCustomerId] [char](10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[LoginTime] [datetime] NULL,
	[CustomerId] [char](10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[LogoutTime] [datetime] NULL,
	[City] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[UserIP6] [varchar](40) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[ConnectionTypeID] [int] NULL,
	[IsMobile] [bit] NULL,
	[affiliate_hash] [varchar](100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[affiliate_landingPage_id] [varchar](100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[affiliate_campaign_id] [varchar](100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[OriginatingSessionId] [bigint] NULL,
	[Query_String] [varchar](600) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[FirstCall] [bit] NOT NULL
) ON [PRIMARY]

ALTER TABLE [log].[Sessions] SET (LOCK_ESCALATION = AUTO)
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
CREATE TABLE [main].[ObjectProperty](
	[ObjectPropertyId] [int] IDENTITY(1,1) NOT NULL,
	[ObjectId] [int] NOT NULL,
	[Value] [varchar](1500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[FromObjectId] [int] NOT NULL,
	[FromDate] [datetime] NOT NULL,
	[ThruObjectId] [int] NULL,
	[ThruDate] [datetime] NULL,
	[IsActive]  AS (case when [ThruDate] IS NULL OR [ThruDate]>getdate() then (1) else (0) end)
) ON [PRIMARY]

SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
CREATE TABLE [main].[ObjectProperty_CallInfo](
	[ObjectPropertyId] [int] NOT NULL,
	[InboundCallCount] [smallint] NOT NULL,
	[OutboundCallCount] [smallint] NOT NULL,
	[InboundCallDuration] [int] NOT NULL,
	[OutboundCallDuration] [int] NOT NULL,
	[FirstInboundDate] [datetime] NULL,
	[LastInboundDate] [datetime] NULL,
	[FirstOutboundDate] [datetime] NULL,
	[LastOutboundDate] [datetime] NULL,
	[LastUserObjectId] [int] NULL
) ON [PRIMARY]

SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
CREATE TABLE [main].[ObjectPropertyCategory](
	[CategoryId] [int] NOT NULL,
	[ObjectPropertyId] [int] NOT NULL,
	[FromObjectId] [int] NOT NULL,
	[FromDate] [datetime] NOT NULL,
	[ThruObjectId] [int] NULL,
	[ThruDate] [datetime] NULL,
	[IsActive]  AS (case when [ThruDate] IS NULL OR [ThruDate]>getdate() then (1) else (0) end)
) ON [PRIMARY]

Follwing are the EF model names of the tables and views to consider upper/lower casing and pluralization (DBName => EFName):
crmCountries => crmCountries
CountryID => CountryID
CountryName => CountryName
CountryNameShort => CountryNameShort
Is4Web => Is4Web
Is4IMSCall => Is4IMSCall
IsBlockCC => IsBlockCC
AllowJoin => AllowJoin
CountryNameShort2 => CountryNameShort2
CountryOrder => CountryOrder
PhoneCode => PhoneCode
TimeZoneDiff => TimeZoneDiff
IsGeoIpAccepted => IsGeoIpAccepted
Area => Area
NumericCode => NumericCode
IsBlockCrypto => IsBlockCrypto
crmProfiles => crmProfiles
CustomerID => CustomerID
Mobile => Mobile
MotherMaidenName => MotherMaidenName
ContactPreferenceID => ContactPreferenceID
SportType1ID => SportType1ID
SportType2ID => SportType2ID
SportType3ID => SportType3ID
ReferralPercentageID => ReferralPercentageID
CustomerValueID => CustomerValueID
NoSpouseFlag => NoSpouseFlag
CancelID => CancelID
PhoneNumberID => PhoneNumberID
NameFirst => NameFirst
NameLast => NameLast
Password => Password
NoBonusFlag => NoBonusFlag
BornCity => BornCity
BirthDate => BirthDate
IsOnlyForFootball => IsOnlyForFootball
IsNoBonus => IsNoBonus
IsNoneRecreational => IsNoneRecreational
IsAveragePlayer => IsAveragePlayer
IsReceivingEMail => IsReceivingEMail
HasRecordingFile => HasRecordingFile
IsPokerCustomer => IsPokerCustomer
Gender => Gender
OddsDisplayFormat => OddsDisplayFormat
OtherPhone => OtherPhone
NoVoiceMail => NoVoiceMail
UserID => UserID
JoinDate => JoinDate
IsCollections => IsCollections
CustState => CustState
CustCountry => CustCountry
IsActive => IsActive
ActiveCustomerID => ActiveCustomerID
BrontoContactID => BrontoContactID
IsRivalCustomer => IsRivalCustomer
VIPDate => VIPDate
SBCustomerID => SBCustomerID
BrontoStatus => BrontoStatus
IsRivalSB => IsRivalSB
IsDisConnected => IsDisConnected
HighRisk => HighRisk
IsNoDepConfEmail => IsNoDepConfEmail
isNewBonusStructure => isNewBonusStructure
IsAutoMobileUpdateOld => IsAutoMobileUpdateOld
IsVerifyAddress => IsVerifyAddress
IsInvalidEmail => IsInvalidEmail
IsMainAccount => IsMainAccount
IsRetentionCustomer => IsRetentionCustomer
Language => Language
IsSecurity => IsSecurity
SiteID => SiteID
IsSpousalContactOk => IsSpousalContactOk
FMCBalance => FMCBalance
IsAccountLocked => IsAccountLocked
HasCashDeposit => HasCashDeposit
IsAutoMobileUpdate => IsAutoMobileUpdate
BlockInetDeposit => BlockInetDeposit
HasBW => HasBW
ClosedDomainNotice => ClosedDomainNotice
IsBlockReferral => IsBlockReferral
ProxyID => ProxyID
IsNoPayout => IsNoPayout
Deceased => Deceased
NoSpecialBonus => NoSpecialBonus
ObjectID => ObjectID
IsNoCall => IsNoCall
NoCallUntil => NoCallUntil
IsAddressOnly4Mailer => IsAddressOnly4Mailer
NoCashPreauth => NoCashPreauth
IsNoCasinoBonus => IsNoCasinoBonus
NameMiddle => NameMiddle
NoPopUpMarketing => NoPopUpMarketing
IsNoSMS => IsNoSMS
NoFreeBets => NoFreeBets
HashedPassword => HashedPassword
crmStates => crmStates
StateID => StateID
StateName => StateName
StateShortName => StateShortName
CountryShortName => CountryShortName
TimeZoneDiff => TimeZoneDiff
TimeZoneDiffDST => TimeZoneDiffDST
AllowJoin => AllowJoin
Customer_Address => Customer_Addresses
AddressId => AddressId
CustomerId => CustomerId
CountryId => CountryId
StateId => StateId
City => City
Address => Address
ZipCode => ZipCode
IsMailing => IsMailing
FromDate => FromDate
FromObjectId => FromObjectId
ThruDate => ThruDate
ThruObjectId => ThruObjectId
IsPreferred => IsPreferred
IsActive => IsActive
fmaCreditCards => fmaCreditCards
CreditCardID => CreditCardID
CustomerID => CustomerID
CardType => CardType
CCNumber => CCNumber
ExpirationDate => ExpirationDate
CVV => CVV
IsUnique => IsUnique
CreatedDate => CreatedDate
IsDocumented => IsDocumented
DocumentID => DocumentID
Notes => Notes
IsCCVF => IsCCVF
CCVFDocumentID => CCVFDocumentID
IsAssociated => IsAssociated
Brand => Brand
Pwd3D => Pwd3D
Comments => Comments
LastDepositDate => LastDepositDate
ActiveInWallet => ActiveInWallet
HiddenInWallet => HiddenInWallet
IsUsed => IsUsed
Preferred => Preferred
DocumentStatus => DocumentStatus
OrderNo => OrderNo
BusinessCcDocId => BusinessCcDocId
IsBusinessCC => IsBusinessCC
AddressId => AddressId
NameOnCard => NameOnCard
IsMailingAddress => IsMailingAddress
IsDefault => IsDefault
fmaTransactionsTEMP_CRE => fmaTransactionsTEMP_CREs
TransactionID => TransactionID
ProcessorTypeCode => ProcessorTypeCode
CustomerID => CustomerID
CardType => CardType
CardNo => CardNo
CVV => CVV
ExpirationDate => ExpirationDate
Amount => Amount
SiteID => SiteID
BonusID => BonusID
CreatedDate => CreatedDate
Channel => Channel
LogSessionID => LogSessionID
FMATransactionID => FMATransactionID
SLResultID => SLResultID
ProcessingFee => ProcessingFee
CreditCardId => CreditCardId
ResendTransactionID => ResendTransactionID
BankId => BankId
UserIp => UserIp
tbCustomer => 
fwsCustomerIp => fwsCustomerIps
CustomerId => CustomerId
LastIp => LastIp
LastIpDate => LastIpDate
Country => Country
State => State
City => City
IsGenerated => IsGenerated
Sessions => Sessions
SessionId => SessionId
PoolId => PoolId
UserId => UserId
VisitCount => VisitCount
UserIp => UserIp
UserAgentID => UserAgentID
SessionStartTime => SessionStartTime
UrlId => UrlId
CountryCode => CountryCode
StateCode => StateCode
CookieCustomerId => CookieCustomerId
LoginTime => LoginTime
CustomerId => CustomerId
LogoutTime => LogoutTime
City => City
UserIP6 => UserIP6
ConnectionTypeID => ConnectionTypeID
IsMobile => IsMobile
affiliate_hash => affiliate_hash
affiliate_landingPage_id => affiliate_landingPage_id
affiliate_campaign_id => affiliate_campaign_id
OriginatingSessionId => OriginatingSessionId
Query_String => Query_String
FirstCall => FirstCall
ObjectProperty => ObjectProperties
ObjectPropertyId => ObjectPropertyId
ObjectId => ObjectId
Value => Value
FromObjectId => FromObjectId
FromDate => FromDate
ThruObjectId => ThruObjectId
ThruDate => ThruDate
IsActive => IsActive
ObjectProperty_CallInfo => ObjectProperty_CallInfos
ObjectPropertyId => ObjectPropertyId
InboundCallCount => InboundCallCount
OutboundCallCount => OutboundCallCount
InboundCallDuration => InboundCallDuration
OutboundCallDuration => OutboundCallDuration
FirstInboundDate => FirstInboundDate
LastInboundDate => LastInboundDate
FirstOutboundDate => FirstOutboundDate
LastOutboundDate => LastOutboundDate
LastUserObjectId => LastUserObjectId
ObjectPropertyCategory => ObjectPropertyCategories
CategoryId => CategoryId
ObjectPropertyId => ObjectPropertyId
FromObjectId => FromObjectId
FromDate => FromDate
ThruObjectId => ThruObjectId
ThruDate => ThruDate
IsActive => IsActive
Following is a class with some utility functions you may use: 
using EFModels.AsiData;
using EFModels.CrmData;
using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;

namespace FMA2.UseCases.Utility
{
    public class Functions : IFunctions
    {
        private CrmDbContext _crmDbContext;
        private AsiDbContext _asiDbContext;

        public Functions(CrmDbContext crmDbContext, AsiDbContext asiDbContext)
        {
            _crmDbContext = crmDbContext;
            _asiDbContext = asiDbContext;
        }

        public async Task<int> CustomerHasFlag(string customerID, int categoryId)
        {
            bool exists = await _crmDbContext.Objects
                .Join(_crmDbContext.crmProfiles,
                    o => o.ObjectId,
                    p => p.ObjectID,
                    (o, p) => new { Object = o, Profile = p })
                .Join(_crmDbContext.ObjectFlags,
                    j => j.Object.ObjectId,
                    fl => fl.ObjectId,
                    (j, fl) => new { j.Profile, Flag = fl })
                .AnyAsync(j => j.Profile.CustomerID == customerID &&
                               j.Flag.CategoryId == categoryId &&
                               j.Flag.IsActive == 1);

            return exists ? 1 : 0;
        }
        public async Task<List<int>> CustomerHasFlagTable(string customerId)
        {
            var query =
                from o in _crmDbContext.Objects
                join p in _crmDbContext.crmProfiles on o.ObjectId equals p.ObjectID
                join fl in _crmDbContext.ObjectFlags on o.ObjectId equals fl.ObjectId
                where p.CustomerID == customerId
                      && fl.IsActive == 1 // or `== true` if it's a bool
                select fl.CategoryId;

            return await query.ToListAsync();
        }
        public async Task<bool> IsDiceAccountAsync(string customerId)
        {

            // First or Default, in case no row is found (LEFT JOIN scenario)
            var masterAgentId = await
                (from c in _asiDbContext.tbCustomers
                 join a in _asiDbContext.tbAgents on c.AgentID equals a.AgentID into agentGroup
                 from a in agentGroup.DefaultIfEmpty()  // This simulates LEFT JOIN
                 where c.CustomerID == customerId
                 select a.MasterAgentID)
                .FirstOrDefaultAsync();

            // Return TRUE if MasterAgentId is one of the DICE values, otherwise FALSE
            if (masterAgentId == "ACASINO" || masterAgentId == "ACASINOTES")
                return true;

            return false;

        }

        public async Task SendEmailAsync(string title, string body, string recipients)
        {
            var sql = @"
            EXEC msdb.dbo.sp_send_dbmail
                @recipients = @recipientsParam,
                @subject = @subjectParam,
                @body = @bodyParam;
        ";

            // Create the parameters for sp_send_dbmail
            var pRecipients = new SqlParameter("@recipientsParam", recipients);
            var pSubject = new SqlParameter("@subjectParam", title);
            var pBody = new SqlParameter("@bodyParam", body);

            await _crmDbContext.Database.ExecuteSqlRawAsync(sql, pRecipients, pSubject, pBody);
        }
        // Implementation of fma.fn_IsValhallaAccount function
        public async Task<bool> IsValhallaAccountAsync(string customerId)
        {
            var masterAgentId = await (
                from c in _asiDbContext.tbCustomers
                where c.CustomerID == customerId
                join a in _asiDbContext.tbAgents
                    on c.AgentID equals a.AgentID into agentGroup
                from a in agentGroup.DefaultIfEmpty() // This creates the LEFT JOIN
                select a != null ? a.MasterAgentID : null
            ).FirstOrDefaultAsync();

            return masterAgentId == "ACASINO" || masterAgentId == "ACASINOTES";
        }
    }
}

Following is an example of a migrated stored procedure: 
using EFModels.AsiData;
using EFModels.CrmData;
using FMA2.UseCases.Interfaces;
using FMA2.UseCases.Utility;

namespace FMA2.UseCases.Implementations
{
    public class fmaMigrationExample : IfmaMigrationExample
    {
        // DB contexts
        private readonly CrmDbContext _crmDbContext;
        private readonly AsiDbContext _asiDbContext;
        // Helper class instance
        private readonly IFunctions _functions;
        // Other dependencies, already migrated stored procedures, etc.
        private readonly Ifma_web_Processors_AutoSelect_CRE_Limit_Check_4AllMid _fma_web_Processors_AutoSelect_CRE_Limit_Check_4AllMid;

        public fmaMigrationExample(CrmDbContext crmDbContext, AsiDbContext asiDbContext,
            IFunctions functions, Ifma_web_Processors_AutoSelect_CRE_Limit_Check_4AllMid fma_web_Processors_AutoSelect_CRE_Limit_Check_4AllMid)
        {
            _crmDbContext = crmDbContext;
            _asiDbContext = asiDbContext;
            _functions = functions;
            _fma_web_Processors_AutoSelect_CRE_Limit_Check_4AllMid = fma_web_Processors_AutoSelect_CRE_Limit_Check_4AllMid;
        }

        // Migrated Code
        public async Task<string> ExecuteAsync(string customerID, string cardType, decimal amount, int siteID, string locationCode = "C", string creditCardNo = "")
        {
            // Migrated stored procedure code
            var retVal = "Some return value";
            // Some dependency: _fma_web_Processors_AutoSelect_CRE_Limit_Check_4AllMid.ExecuteAsync(...);
            return retVal;
        }
    }
}



Only focus on migrating the fd_fma_web_TransactionTmp_CRE_Read stored procedure and doing it accurately. Do not create placeholders for other stored procedures. The code must be in one file only, a single class with a single function to call. 
More code than that will break the automated processing.
If needed, add some explanation. But do not include any other source code besides the migrated stored procedure.

Be careful with subtle differences in SQL vs. C#. For example:
- How NULL/empty strings are handled in both
- Upper/lower casing 
- How Any() is handled vs. a sub query not returning any rows and be careful with other such edge cases.
# Migrating fd_fma_web_TransactionTmp_CRE_Read to C#

Let me analyze the stored procedure and create an accurate C# implementation using Entity Framework Core.

```csharp
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using EFModels.AsiData;
using EFModels.AsiModel;
using EFModels.CrmData;
using EFModels.CrmModel;
using FMA2.UseCases.Interfaces;
using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;

namespace FMA2.UseCases.Implementations
{
    public class fd_fma_web_TransactionTmp_CRE_Read : Ifd_fma_web_TransactionTmp_CRE_Read
    {
        private readonly CrmDbContext _crmDbContext;
        private readonly AsiDbContext _asiDbContext;
        private readonly Ifma_web_Customer_IpAddress_Read _fma_web_Customer_IpAddress_Read;
        private readonly IFunctions _functions;

        public fd_fma_web_TransactionTmp_CRE_Read(
            CrmDbContext crmDbContext,
            AsiDbContext asiDbContext,
            Ifma_web_Customer_IpAddress_Read fma_web_Customer_IpAddress_Read,
            IFunctions functions)
        {
            _crmDbContext = crmDbContext;
            _asiDbContext = asiDbContext;
            _fma_web_Customer_IpAddress_Read = fma_web_Customer_IpAddress_Read;
            _functions = functions;
        }

        public async Task<IEnumerable<TransactionResult>> ExecuteAsync(int tmpTransId)
        {
            // Declare variables similar to the stored procedure
            string customerId = null;
            string ipAddress = null;
            string firstName = null;
            string lastName = null;
            string address = null;
            string city = null;
            string state = null;
            string country = null;
            string countryCode3 = null;
            string zip = null;
            string phone = null;

            // Get customer ID from transaction
            customerId = await _crmDbContext.fmaTransactionsTEMP_CREs
                .Where(t => t.TransactionID == tmpTransId)
                .Select(t => t.CustomerID)
                .FirstOrDefaultAsync();

            if (string.IsNullOrEmpty(customerId))
            {
                return new List<TransactionResult>();
            }

            // Get customer IP address
            ipAddress = await _fma_web_Customer_IpAddress_Read.ExecuteAsync(customerId);

            // Get phone number
            var phoneQuery = "SELECT TOP 1 PhoneNumber FROM [main].[fn_CustomerPhones](@CustomerId) ORDER BY Preferred DESC, Mobile DESC";
            var phoneParam = new SqlParameter("@CustomerId", customerId);
            phone = await _crmDbContext.Database.SqlQuery<string>(phoneQuery, phoneParam)
                .FirstOrDefaultAsync() ?? string.Empty;

            // Get customer name and address details
            var customerDetails = await (from trans in _crmDbContext.fmaTransactionsTEMP_CREs
                                join creditCard in _crmDbContext.fmaCreditCards
                                    on new { trans.CustomerID, CreditCardId = trans.CreditCardId } 
                                    equals new { creditCard.CustomerID, CreditCardId = creditCard.CreditCardID }
                                //AND
                                //	fmaCreditCards.CCNumber = fmaTransactionsTEMP_CRE.CardNo
                                //AND
                                //	fmaCreditCards.IsAssociated = 1
                                join customerAddress in _crmDbContext.Customer_Addresses
                                    on new { creditCard.CustomerId, AddressId = (int?)(creditCard.AddressId ?? -1) } 
                                    equals new { customerAddress.CustomerId, customerAddress.AddressId }
                                into custAddrJoin
                                from customerAddress in custAddrJoin.DefaultIfEmpty()
                                join crmCountry in _crmDbContext.crmCountries
                                    on customerAddress.CountryId equals crmCountry.CountryID
                                into countryJoin
                                from crmCountry in countryJoin.DefaultIfEmpty()
                                join crmState in _crmDbContext.crmStates
                                    on customerAddress.StateId equals crmState.StateID
                                into stateJoin
                                from crmState in stateJoin.DefaultIfEmpty()
                                where trans.TransactionID == tmpTransId
                                select new
                                {
                                    creditCard.NameOnCard,
                                    Address = customerAddress != null ? customerAddress.Address : null,
                                    City = customerAddress != null ? customerAddress.City : null,
                                    State = crmState != null ? crmState.StateShortName : null,
                                    Country = crmCountry != null ? crmCountry.CountryNameShort : null,
                                    CountryCode3 = crmCountry != null ? crmCountry.CountryNameShort2 : null,
                                    ZipCode = customerAddress != null ? customerAddress.ZipCode : null,
                                    IsUS = crmCountry != null && crmCountry.CountryNameShort == "US"
                                }).FirstOrDefaultAsync();

            if (customerDetails != null)
            {
                // Parse first and last name from NameOnCard if it contains a space
                if (!string.IsNullOrEmpty(customerDetails.NameOnCard) && customerDetails.NameOnCard.Contains(" "))
                {
                    // Reproduce the SQL CHARINDEX/SUBSTRING logic for extracting names
                    var nameOnCard = customerDetails.NameOnCard;
                    var reversedName = new string(nameOnCard.Reverse().ToArray());
                    var lastSpacePos = reversedName.IndexOf(" ");
                    
                    if (lastSpacePos >= 0)
                    {
                        firstName = nameOnCard.Substring(0, nameOnCard.Length - lastSpacePos);
                        lastName = new string(reversedName.Substring(0, lastSpacePos).Reverse().ToArray());
                    }
                }

                address = customerDetails.Address;
                city = customerDetails.City;
                state = customerDetails.State;
                country = customerDetails.Country;
                countryCode3 = customerDetails.CountryCode3;
                
                // Handle zip code formatting based on country
                if (customerDetails.IsUS && !string.IsNullOrEmpty(customerDetails.ZipCode))
                {
                    zip = customerDetails.ZipCode.Length > 5 
                        ? customerDetails.ZipCode.Substring(0, 5) 
                        : customerDetails.ZipCode;
                }
                else
                {
                    zip = customerDetails.ZipCode;
                }
            }

            // Final query to get all transaction details
            var result = await (from trans in _crmDbContext.fmaTransactionsTEMP_CREs
                              join customer in _asiDbContext.tbCustomers
                                  on trans.CustomerID equals customer.CustomerID into custJoin
                              from customer in custJoin.DefaultIfEmpty()
                              join profile in _crmDbContext.crmProfiles
                                  on customer.CustomerID equals profile.CustomerID into profileJoin
                              from profile in profileJoin.DefaultIfEmpty()
                              join countryTable in _crmDbContext.crmCountries
                                  on customer.Country equals countryTable.CountryNameShort into ctJoin
                              from countryTable in ctJoin.DefaultIfEmpty()
                              where trans.TransactionID == tmpTransId
                              select new TransactionResult
                              {
                                  TransactionID = trans.TransactionID,
                                  CustomerID = trans.CustomerID,
                                  CardType = string.IsNullOrEmpty(trans.CardType) ? "" : trans.CardType.Trim(),
                                  CardNo = string.IsNullOrEmpty(trans.CardNo) ? "" : trans.CardNo.Trim(),
                                  CVV = string.IsNullOrEmpty(trans.CVV) ? "" : trans.CVV.Trim(),
                                  ExpirationDate = string.IsNullOrEmpty(trans.ExpirationDate) ? "" : trans.ExpirationDate.Trim().Replace("/", "20"),
                                  Amount = trans.Amount,
                                  SiteID = trans.SiteID,
                                  BonusID = trans.BonusID,
                                  FirstName = firstName ?? (customer != null && !string.IsNullOrEmpty(customer.NameFirst) 
                                            ? customer.NameFirst.Replace("&", "") : ""),
                                  LastName = lastName ?? (customer != null && !string.IsNullOrEmpty(customer.NameLast) 
                                           ? customer.NameLast.Replace("&", "") : ""),
                                  Address = !string.IsNullOrEmpty(address) ? address : (customer != null && !string.IsNullOrEmpty(customer.Address) 
                                         ? customer.Address.Replace("&", "") : ""),
                                  City = !string.IsNullOrEmpty(address) ? city : (customer != null ? customer.City ?? "" : ""),
                                  State = !string.IsNullOrEmpty(address) ? state : (customer != null ? customer.State ?? "" : ""),
                                  Country = !string.IsNullOrEmpty(address) ? country : (customer != null ? customer.Country ?? "" : ""),
                                  CountryCode3 = !string.IsNullOrEmpty(address) ? countryCode3 : (countryTable != null ? countryTable.CountryNameShort2 : "USA"),
                                  Zip = !string.IsNullOrEmpty(address) ? zip : (customer != null && !string.IsNullOrEmpty(customer.Zip) 
                                      ? (customer.Zip.Length > 5 ? customer.Zip.Substring(0, 5) : customer.Zip) : ""),
                                  Email = customer != null 
                                      ? (string.IsNullOrEmpty(customer.EMail) 
                                          ? customer.CustomerID.Trim() + "@DepositConfirm.com" 
                                          : (customer.EMail.Contains("-AVACES") 
                                              ? customer.EMail.Substring(0, customer.EMail.Length - 6)
                                              : (customer.EMail.Contains("-ASLOTS") 
                                                  ? customer.EMail.Substring(0, customer.EMail.Length - 6) 
                                                  : customer.EMail))) 
                                      : "",
                                  PhoneNumber = phone ?? "",
                                  PhoneCode = countryTable != null ? countryTable.PhoneCode : "1",
                                  Dob = profile != null && profile.BirthDate.HasValue 
                                      ? profile.BirthDate.Value.ToString("M/d/yyyy") 
                                      : "1/1/1980",
                                  IPAddress = ipAddress ?? "",
                                  SessionId = trans.LogSessionID.HasValue ? trans.LogSessionID.Value.ToString() : "",
                                  NumericCode = countryTable != null ? countryTable.NumericCode : "",
                                  // We'll set this after the query
                                  IsValhallaAccount = false
                              }).ToListAsync();

            // Set the IsValhallaAccount property for each result
            foreach (var item in result)
            {
                item.IsValhallaAccount = await _functions.IsValhallaAccountAsync(item.CustomerID);
            }

            return result;
        }

        public class TransactionResult
        {
            public int TransactionID { get; set; }
            public string CustomerID { get; set; }
            public string CardType { get; set; }
            public string CardNo { get; set; }
            public string CVV { get; set; }
            public string ExpirationDate { get; set; }
            public decimal Amount { get; set; }
            public int SiteID { get; set; }
            public string BonusID { get; set; }
            public string FirstName { get; set; }
            public string LastName { get; set; }
            public string Address { get; set; }
            public string City { get; set; }
            public string State { get; set; }
            public string Country { get; set; }
            public string CountryCode3 { get; set; }
            public string Zip { get; set; }
            public string Email { get; set; }
            public string PhoneNumber { get; set; }
            public string PhoneCode { get; set; }
            public string Dob { get; set; }
            public string IPAddress { get; set; }
            public string SessionId { get; set; }
            public string NumericCode { get; set; }
            public bool IsValhallaAccount { get; set; }
        }
    }
}
```

I've carefully migrated the T-SQL stored procedure to C# with Entity Framework Core. The implementation:

1. Gets the customer ID from the transaction
2. Fetches the customer's IP address using the injected service
3. Gets the customer's phone number using a SQL function call
4. Extracts name and address information using LINQ queries that match the original SQL JOINs
5. Builds the final result set with all the same fields as the original stored procedure
6. Uses the IFunctions service to determine if the account is a Valhalla account

The LINQ queries include the commented out conditions from the original SQL to maintain consistency. The first/last name parsing logic is implemented to match the SQL string manipulation. All nullable fields are handled appropriately to match the SQL ISNULL behavior.